package co.kr.jaejoo.pcClient;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

@SuppressWarnings("serial")
public class SystemMainClient extends JFrame {

	

	public SystemMainClient() {
		setTitle("사용자를 컨트롤하는 화면입니다.");
		setSize(1600, 900);

		JPanel mainpanel = new JPanel();

		Dimension framesize = this.getSize();
		Dimension windowsize = Toolkit.getDefaultToolkit().getScreenSize();
		int width = (windowsize.width - framesize.width) / 2;
		int height = (windowsize.height - framesize.height) / 2;

		setLocation(width, height);
		mainpanel.setLayout(null);
		mainpanel.setBounds(0, 0, 1600, 900);

		// frame안에 설정값을 넣기위한 값을 설정합니다.
		// 아래의 innerclass들은 Runable을 implement하여 구현했습니다.
		// 따라서 //Runnable의 예, 밑의 객체는 Runnable을 구현했다. 
		// 타입 객체명 = new 타입();
		// new Thead(해당객체명).start(); 으로 thread를 사용합니다.
		
		
		// 배경을 불러오기 위한 선언
		JPanel myPanel = new MyPanel(); // innerclass인 mypanel이 jpanel을 상속받기때문에 이렇게 사용이 가능합니다
		myPanel.setLayout(null);
		myPanel.setBounds(0, -30, 1600, 900);

		// 시계를 사용하기위한 선언
		ImgClock imgClock = new ImgClock();
		imgClock.setLayout(null);
		imgClock.setBounds(15, 20, 179, 149);
		imgClock.setOpaque(false); // 배경이 투명하게 됩니다.
		new Thread(imgClock).start();
		
		ClockMessage clockMessage = new ClockMessage();
		clockMessage.setBounds(80, 53, 100, 100);
		clockMessage.setOpaque(false);
		new Thread(clockMessage).start();
		
		// 움직이는 광원을 처리합니다.
		MyStarPanel myStarPanel = new MyStarPanel();
		myStarPanel.setLayout(null);
		myStarPanel.setBounds(0, -30, 1600, 900);
		myStarPanel.setOpaque(false);
		new Thread(myStarPanel).start();
		
		// 최종 삽입
		mainpanel.add(myPanel, new Integer(0));
		mainpanel.add(imgClock, new Integer(4));
		mainpanel.add(clockMessage, new Integer(5));
		mainpanel.add(myStarPanel, new Integer(3));
		add(mainpanel);
		
		setVisible(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
	}

	// 배경이미지를 백그라운드에 넣기 위한 innerclass
	class MyPanel extends JPanel {
		Image image;

		public MyPanel() {
			image = Toolkit.getDefaultToolkit().createImage("img/mainHud_back.png");
		}

		@Override
		public void paint(Graphics g) {
			super.paint(g);
			g.drawImage(image, 0, 0, this);
		}

	}

	// 시계이미지를 넣기위한 innerclass를 작성합니다.
	class ImgClock extends JPanel implements Runnable {

		Image image[] = new Image[4];
		int i = 2;

		public ImgClock() {
			image[1] = Toolkit.getDefaultToolkit().createImage("img/cl1.png");
			image[2] = Toolkit.getDefaultToolkit().createImage("img/cl2.png");
			image[3] = Toolkit.getDefaultToolkit().createImage("img/cl3.png");
			image[0] = image[1];
		}

		@Override
		public void paint(Graphics g) {
			super.paint(g);
			g.drawImage(image[0], 0, 0, this);
		}

		@Override
		public void run() {
			
			// Runable 을 상속받으면 run이라는 메서드를 사용이 가능합니다. 
			// threa에 관련한 값을 여기에 작성합니다.
			
			while (true) {
				try {
					Thread.sleep(10000);
					switch (i) {
					case 1:
						image[0] = image[i];
						i++;
						repaint();
						break;
					case 2:
						image[0] = image[i];
						i++;
						repaint();
						break;
					case 3:
						image[0] = image[i];
						i = 1;
						repaint();
						break;
					}
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}

	}
	
	// 시계글씨를 위한 innerclass를 작성합니다.
	class ClockMessage extends JPanel implements Runnable{

		// 시간을 불러오기위한 클래스들을 불러와 사용합니다.
		int i = Calendar.getInstance().get(Calendar.AM_PM);
		String[] ampm = {"AM","PM"};
		SimpleDateFormat adf = new SimpleDateFormat("hh:mm:ss");
		String time = adf.format(new Date());
		JLabel timelabel, ampmlabel;
		
		public ClockMessage() {
			this.setLayout(null);
			
			// label안에 시간이 갈수 있게 넣어주엇습니다.
			timelabel = new JLabel(time);
			timelabel.setBounds(0, 0, 100, 20);
			timelabel.setForeground(new Color(36, 205, 198)); // color에 관한 class를 이용한 시계의 색을 설정합니다.
			timelabel.setFont(new Font("고딕", Font.BOLD, 12)); // 시계에 사용되는 font를 설정합니다.
			
			ampmlabel = new JLabel(ampm[i]);
			ampmlabel.setBounds(15, 20, 100, 30);
			ampmlabel.setForeground(new Color(36, 205, 198));
			ampmlabel.setFont(new Font("고딕", Font.BOLD, 12));
			
			add(timelabel, BorderLayout.NORTH);
			add(ampmlabel, BorderLayout.CENTER);
			
		}
		
		@Override
		public void run() {
			do{
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				timelabel.setText(adf.format(new Date()));
			}while(true);
		}
		
	}
	
	// 광원을 처리하기 위한 innerclass를 작성합니다.
	
	class MyStarPanel extends JPanel implements Runnable{

		Image image;
		int i = 1;
		int sleep = 25;
		int sx = 77 , sy = 0;
		
		public MyStarPanel() {
			image = Toolkit.getDefaultToolkit().createImage("img/starDdong.png");
		}
		
		@Override
		public void paint(Graphics g) {
			super.paint(g);
			if(image != null){
				g.drawImage(image, sx, sy, this);
			}
		}
		
		@Override
		public void run() {
				try {
					do{
					Thread.sleep(sleep);
					switch(i){
					case 1 : sy += 2; if (sy > 791) i = 2; break;
					case 2 : sx += 2; if (sx > 1507) i = 3; break;
					case 3 : sy -= 2; if (sy < 53) i = 4; break;
					case 4 : sy -= 2; if (sx > 77) i = 1; break;
					}
					repaint();
				}while(true);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
		}
		
	}
	

}
